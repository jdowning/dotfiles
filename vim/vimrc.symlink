set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'bling/vim-airline'
Plugin 'editorconfig/editorconfig-vim'

" Tim Pope Awesomeness
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-cucumber'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-rbenv'
Plugin 'tpope/vim-surround'

" Formatting
Plugin 'avakhov/vim-yaml'
Plugin 'bkad/vim-terraform'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'elzr/vim-json'
Plugin 'evanmiller/nginx-vim-syntax'
Plugin 'fatih/vim-go'
Plugin 'fatih/vim-hclfmt'
Plugin 'kchmck/vim-coffee-script'
Plugin 'pangloss/vim-javascript'
Plugin 'rodjek/vim-puppet', { 'name': 'puppet' }
Plugin 'saltstack/salt-vim'
Plugin 'walm/jshint.vim'
Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'cespare/vim-toml'
Plugin 'nathanielc/vim-tickscript'
Plugin 'pearofducks/ansible-vim'
Plugin 'thoughtbot/vim-rspec'
Plugin 'mustache/vim-mustache-handlebars'

"Plugin 'MarcWeber/vim-addon-mw-utils'
"Plugin 'bronson/vim-trailing-whitespace'
"Plugin 'ervandew/supertab'
"Plugin 'garbas/vim-snipmate'
"Plugin 'godlygeek/tabular'
"Plugin 'honza/vim-snippets'
"Plugin 'ctrlpvim/ctrlp.vim'
"Plugin 'lepture/vim-jinja'
Plugin 'scrooloose/syntastic'
"Plugin 'tomtom/tlib_vim'
"Plugin 'tsaleh/vim-tmux'
Plugin 'vim-ruby/vim-ruby'
"Plugin 'vim-scripts/Gist.vim'
"Plugin 'vim-scripts/Specky'

 " Themes
"Plugin 'Lokaltog/vim-distinguished'
"Plugin 'alem0lars/vim-colorscheme-darcula'
Plugin 'altercation/vim-colors-solarized'
"Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
"Plugin 'fatih/molokai'
Plugin 'nanotech/jellybeans.vim.git'
"Plugin 'sjl/badwolf'
"Plugin 'tpope/vim-vividchalk'
Plugin 'raphamorim/lucario'

call vundle#end()

syntax on
filetype plugin indent on
set background=dark
colorscheme lucario
set shell=zsh

set ai                        " always set autoindenting on
set background=dark           " for solarized
set backspace=2               " Fix broken backspace in some setups
set clipboard=unnamed         " yank and paste with the system clipboard
set encoding=utf-8            " UTF-8
set expandtab                 " insert space characters whenever the tab key is pressed
set hlsearch                  " highlight search terms
set ignorecase                " ignore case when searching
set incsearch                 " show search matches as you type
set laststatus=2              " always show statusline
set list                      " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set modelines=2               " check first two lines for modeline
set number                    " show line numbers
set pastetoggle=<F2>          " shortcut to toggle :set paste
set ruler                     " show where you are
set scrolloff=3               " show context above/below cursorline
set shiftround                " use multiple of shiftwidth when indenting with '<' and '>'
set shiftwidth=2              " number of spaces to use for autoindenting
set showcmd                   " show command in bottom bar
set smartcase                 " case-sensitive search if any caps
set softtabstop=2             " insert mode tab and backspace use 2 spaces
set showmatch                 " set show matching parenthesis
set smartcase                 " ignore case if search pattern is all lowercase, case-sensitive otherwise
set tabstop=4                 " a tab is four spaces
set title                     " change the terminal's title
set wildmenu                  " visual autocomplete for command menu

" keyboard shortcuts
let mapleader = "\<Space>"
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>x :x<CR>
map <leader>l :Align
nmap <leader>a :Ack<space>
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>f :Explore<CR>
nmap <leader>p :Tabularize /=>/l1<CR>
nmap <leader>t :CtrlP<CR>
nmap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nmap <leader><space> :call whitespace#strip_trailing()<CR>
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" netrw
let g:netrw_browsex_viewer = "osx-open-fixed"
let g:netrw_liststyle=3

" syntastic
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_error_symbol = "★"
let g:syntastic_style_error_symbol = ">"
let g:syntastic_warning_symbol = "!"
let g:syntastic_style_warning_symbol = "⚠️"
let g:syntastic_ruby_rubocop_exec = "/Users/justin/.rbenv/shims/rubocop"
let g:syntastic_javascript_checkers = ['standard']

" http://vim.1045645.n5.nabble.com/How-to-disable-netrw-to-generate-history-file-tp4248939p4256854.html
au VimLeave * if filereadable("~/.netrwhist")|call delete("~/.netrwhist")|endif

" you don't need to use : for commands
nnoremap ; :

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml

" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md setlocal spell
let vim_markdown_preview_github=1

" cap is ruby
autocmd BufRead,BufNewFile *.cap set filetype=ruby

" sudo save
cnoremap sudow w !sudo tee % >/dev/null

" Go
iab errnn if err != nil {<CR>return err<CR>}

" spellcheck git commit
autocmd FileType gitcommit setlocal spell

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
function! SelectaCommand(choice_command, selecta_args, vim_command)
  try
    let selection = system(a:choice_command . " | selecta " . a:selecta_args)
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise there will be
    " leftovers from selecta on the screen
    redraw!
    return
  endtry
  redraw!
  exec a:vim_command . " " . selection
endfunction

" Find all files in all non-dot directories starting in the working directory.
" Fuzzy select one of those. Open the selected file with :e.
nnoremap <leader>f :call SelectaCommand("find * -type f", "", ":e")<cr>

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>

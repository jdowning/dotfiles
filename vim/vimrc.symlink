set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'editorconfig/editorconfig-vim'

" Tim Pope Awesomeness
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-rhubarb'

" Formatting
Plugin 'avakhov/vim-yaml'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'elzr/vim-json'
Plugin 'fatih/vim-go'
Plugin 'fatih/vim-hclfmt'
Plugin 'kchmck/vim-coffee-script'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'rodjek/vim-puppet', { 'name': 'puppet' }
Plugin 'saltstack/salt-vim'
Plugin 'walm/jshint.vim'
Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'cespare/vim-toml'
Plugin 'nathanielc/vim-tickscript'
Plugin 'pearofducks/ansible-vim'
Plugin 'janko/vim-test'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'HerringtonDarkholme/yats.vim'
Plugin 'farmergreg/vim-lastplace'
Plugin 'hashivim/vim-terraform'
Plugin 'hashivim/vim-vaultproject'
Plugin 'vim-ruby/vim-ruby'

Plugin 'godlygeek/tabular'
Plugin 'vim-syntastic/syntastic'
Plugin 'AndrewRadev/splitjoin.vim'

" Themes
"Plugin 'nanotech/jellybeans.vim.git'
"Plugin 'sjl/badwolf'
"Plugin 'tpope/vim-vividchalk'
Plugin 'raphamorim/lucario'
"Plugin 'rking/vim-detailed'
Plugin 'jacoborus/tender.vim'
Plugin 'sonph/onehalf', {'rtp': 'vim/'}

call vundle#end()

syntax on
filetype plugin indent on
set background=dark
colorscheme tender
set shell=zsh

set ai                        " always set autoindenting on
set background=dark           " for solarized
set backspace=2               " Fix broken backspace in some setups
set clipboard=unnamed         " yank and paste with the system clipboard
set encoding=utf-8            " UTF-8
set expandtab                 " insert space characters whenever the tab key is pressed
set hlsearch                  " highlight search terms
set ignorecase                " ignore case when searching
set incsearch                 " show search matches as you type
set laststatus=2              " always show statusline
"set list                      " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set modelines=2               " check first two lines for modeline
set number                    " show line numbers
set pastetoggle=<F2>          " shortcut to toggle :set paste
set ruler                     " show where you are
set scrolloff=3               " show context above/below cursorline
set shiftround                " use multiple of shiftwidth when indenting with '<' and '>'
set shiftwidth=2              " number of spaces to use for autoindenting
set showcmd                   " show command in bottom bar
set smartcase                 " case-sensitive search if any caps
set softtabstop=2             " insert mode tab and backspace use 2 spaces
set showmatch                 " set show matching parenthesis
set smartcase                 " ignore case if search pattern is all lowercase, case-sensitive otherwise
set tabstop=4                 " a tab is four spaces
set title                     " change the terminal's title
set wildmenu                  " visual autocomplete for command menu

" keyboard shortcuts
let mapleader = "\<Space>"
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>x :x<CR>
nmap <leader><space> :call whitespace#strip_trailing()<CR>
map <leader>rn :set rnu!<CR>

" Tabularize
map <leader>p :Tabularize /=>/l1<CR>
map <leader>e :Tabularize /=<CR>
map <leader>c :Tabularize /:\zs<CR>

" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" netrw
let g:netrw_browsex_viewer = "osx-open-fixed"
let g:netrw_liststyle=3

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = "★"
let g:syntastic_style_error_symbol = ">"
let g:syntastic_warning_symbol = "!"
let g:syntastic_style_warning_symbol = "⚠️"
let g:syntastic_javascript_checkers = ['standard']
let g:syntastic_ruby_checkers = ['rubocop', 'mri']

" jsx
let g:jsx_ext_required = 0

" http://vim.1045645.n5.nabble.com/How-to-disable-netrw-to-generate-history-file-tp4248939p4256854.html
au VimLeave * if filereadable("~/.netrwhist")|call delete("~/.netrwhist")|endif

" you don't need to use : for commands
nnoremap ; :

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml

" md is markdown
autocmd BufRead,BufNewFile *.md setlocal filetype=markdown textwidth=80
autocmd BufRead,BufNewFile *.md setlocal spell
let vim_markdown_preview_github=1
let vim_markdown_preview_browser='Google Chrome'

" cap is ruby
autocmd BufRead,BufNewFile *.cap set filetype=ruby

" sudo save
cnoremap sudow w !sudo tee % >/dev/null

" Go
autocmd BufNewFile,BufRead *.go setlocal noexpandtab softtabstop=4 tabstop=4 shiftwidth=4
iab errnn if err != nil {<CR>return err<CR>}

" spellcheck git commit
autocmd FileType gitcommit setlocal spell

" vim-test
map <leader>t :TestFile<CR>
map <leader>s :TestNearest<CR>
map <leader>l :TestLast<CR>
map <leader>a :TestSuite<CR>
map <leader>v :TestVisit<CR>
" let test#strategy = "dispatch"

" terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" Dispatch
map <leader>d :Dispatch<CR>
autocmd FileType go let b:dispatch = 'go test'
autocmd FileType sh let b:dispatch = 'make'
autocmd FileType make let b:dispatch = 'make'
autocmd BufEnter *_spec.rb let b:dispatch = 'bundle exec rspec --format progress %'
autocmd BufEnter Gemfile let b:dispatch = 'bundle'

" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
function! SelectaCommand(choice_command, selecta_args, vim_command)
  try
    let selection = system(a:choice_command . " | selecta " . a:selecta_args)
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise there will be
    " leftovers from selecta on the screen
    redraw!
    return
  endtry
  redraw!
  exec a:vim_command . " " . selection
endfunction

" Find all files in all non-dot directories starting in the working directory.
" Fuzzy select one of those. Open the selected file with :e.
nnoremap <leader>f :call SelectaCommand("find * -type f", "", ":e")<cr>

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>

" Run a given vim command on the results of alt from a given path.
function! AltCommand(path, vim_command)
  let l:alternate = system("alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " exists!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction

" Find the alternate file for the current path and open it in a split
nnoremap <leader>. :call AltCommand(expand('%'), ':sp')<cr>
